@model HostelReservationsSystem.Models.RegisterViewModel
@{
    ViewBag.PageId = "extr-page";
}

@section topright{
    <span id="extr-page-header-space"> <span class="hidden-mobile">Already registered?</span> <a href="@Url.Action("login", "account")" class="btn btn-danger">Sign In</a> </span>
}
<div id="content" class="container">
    <div class="row">
        @{ Html.RenderPartial("_LoginText"); }
        <div class="col-xs-12 col-sm-12 col-md-5 col-lg-4">
            <div class="well no-padding">
            @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "smart-form client-form", id = "smart-form-register", role = "form" }))
            {<header>
                 Registration
             </header>
               
                    @Html.AntiForgeryToken()
                    @*@Html.ValidationSummary("", new { @class = "text-danger col-xs-push-2" })*@
                @Html.ValidationBootstrap()
                <fieldset>
                    <section>
                        <div class="form-group">
                             <label class="input">
                                    <i class="icon-append fa fa-envelope"></i>
                                    @Html.TextBoxFor(m => m.Email,new{placeholder="Enter Email Address"})
                                </label>
                            </div>
                    </section>
                    <section>
                        <div class="form-group">
                                <label class="input">
                                    <i class="icon-append fa fa-lock"></i>
                                    @Html.PasswordFor(m => m.Password, new { placeholder = "Password" })
                                </label>
                         </div>
                    </section>

                    <section>
                        <div class="form-group">
                            <label class="input">
                                <i class="icon-append fa fa-lock"></i>
                                @Html.PasswordFor(m => m.ConfirmPassword, new { placeholder = "Confirm Password" })
                            </label>
                        </div>
                    </section>
                    <section>
                        <label class="checkbox">
                            <input type="checkbox" name="terms" id="terms">
                            <i></i>I agree with the <a href="#" data-toggle="modal" data-target="#myModal"> Terms and Conditions </a>
                        </label>
                    </section>
                </fieldset>
                
                            <footer>
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" class="btn btn-default" value="Register" />
                            </div>
                        </div>
                    </footer>
                    
            }

            </div>
        </div>
    </div>
</div>

@{ Html.RenderPartial("_TermsAndConditions"); }
@section pagespecific{
    <script type="text/javascript">
        // Model i agree button
        $("#i-agree").click(function () {
            var $this = $("#terms");
            if ($this.checked) {
                $('#myModal').modal('toggle');
            } else {
                $this.prop('checked', true);
                $('#myModal').modal('toggle');
            }
        });

        // Validation
        $(function () {
            // Validation
            $("#smart-form-register").validate({
                // Rules for form validation
                rules: {
                    email: {
                        required: true,
                        email: true
                    },
                
                    password: {
                        required: true,
                        minlength: 4,
                        maxlength: 20
                    },
                    passwordConfirm: {
                        required: true,
                        minlength: 4,
                        maxlength: 20,
                        equalTo: '#password'
                    },
                    terms: {
                        required: true
                    }
                },

                // Messages for form validation
                messages: {
                    email: {
                        required: 'Please enter your email address',
                        email: 'Please enter a VALID email address'
                    },
                    password: {
                        required: 'Please enter your password'
                    },
                    Confirmpassword: {
                        required: 'Please enter your password one more time',
                        equalTo: 'Please enter the same password as above'
                    },
                    terms: {
                        required: 'You must agree with Terms and Conditions'
                    }
                },

                // Do not change code below
                errorPlacement: function (error, element) {
                    error.insertAfter(element.parent());
                }
            });
        });
    </script>
}